{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPjUC2IuSc8Ze5ohJRL9fOY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aaronhowellai/machine-learning-projects/blob/main/97%20Percent%20Accurate%20ANN%20with%20MNIST\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **97% Accuracy ANN Classifier with MNIST Dataset in PyTorch** ðŸ”¥\n",
        "\n",
        "## **Part of a 3-Part Series:** Convolutional Neural Networks, Part One\n",
        "* An introduction to CNNs, following Pierian Training's online Udemy course \"PyTorch for Deep Learning with Python\" bootcamp.\n",
        "\n",
        "  * As part of an introduction to CNNs for image processing and multi-class classification, I built a 97% Accurate ANN classifier for the MNIST dataset (70,000 handwritten digits from #0-9) in PyTorch as a benchmark to compare its strengths and limitations, relative to how Convolutional Neural Networks perform.\n",
        "\n",
        "  ### **Battle of the networks**\n",
        "\n",
        "  * One of the ANN bottlenecks (which doesn't stand out as much on a smaller dataset like MNIST) is that the number of parameters used in a network compared to CNNs is unnecessarily large and inefficient.\n",
        "      * That means more training time and a heavier model.\n",
        "\n",
        "  * Another bottleneck that is briefly mentioned later in the notebook outline is that there are some details between pixel relationships that are lost when flattening 2D image data into a single array."
      ],
      "metadata": {
        "id": "hUxpEn6Ucj0_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# import packages\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import time\n",
        "import os\n",
        "from pathlib import Path\n",
        "\n",
        "# machine learning packages\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# deep learning packages\n",
        "import torch, torch.nn as nn, torch.nn.functional as F\n",
        "import torchvision, torch.optim as optim\n",
        "from torchvision import datasets, transforms\n",
        "from torchvision.utils import make_grid\n",
        "from torch.utils.data import DataLoader, TensorDataset\n",
        "\n",
        "# settings\n",
        "# torch.set_printoptions(edgeitems=2)\n",
        "np.set_printoptions(formatter=dict(int=lambda x: f'{x:4}'))"
      ],
      "metadata": {
        "id": "DhQ1ltX8sb5g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# utils\n",
        "def plot_digit(image_data):\n",
        "  image = image_data.reshape(28,28)\n",
        "  plt.imshow(image, cmap='binary')\n",
        "  plt.axis('off')"
      ],
      "metadata": {
        "id": "61_Tz883ApCf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **What are Convolutional Neural Networks?**\n",
        "* A CNN is a Neural Network Architecture that are extremely effective at processing with image data.\n",
        "#### ***Below is an example of a CNN processing an image being classified to a label from 1000 different labels with a probability score as an output:***\n"
      ],
      "metadata": {
        "id": "q5DZCNzboDi9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "![image description](https://raw.githubusercontent.com/aaronhowellai/machine-learning-projects/main/machine%20learning%20concepts/cnn%20architecture.png)\n",
        "\n",
        "* [Link](https://github.com/aaronhowellai/machine-learning-projects/blob/main/machine%20learning%20concepts/cnn%20architecture.png) to image on my \"/machine learning concepts\" GitHub page\n",
        "* [Link](https://github.com/aaronhowellai/machine-learning-projects/tree/main/machine%20learning%20concepts) to other Machine Learning concepts"
      ],
      "metadata": {
        "id": "Kai38FW2iyX_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "--------"
      ],
      "metadata": {
        "id": "zxb-LAiiplqb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Topics to be covered**\n",
        "\n",
        "### **Part One - Theory** (Covered in this notebook)\n",
        "1. [MNIST Dataset](https://en.wikipedia.org/wiki/MNIST_database)\n",
        "  * *Modified National Institute of Standards and Technology database*\n",
        "  * A dataset of 10 handwritten digits ranging from 0-9 (from American Census Bureau employees in the training set and American high school students in the test set) used for training of image processing systems such as CNN deep learning models.\n",
        "  * It contains 60,000 training images and 10,000 testing images (70,000 in total)\n",
        "  * The digits are organised into 28 x 28 pixel arrays; with each pixel value representing a shade value such as grey/black/white.\n",
        "\n",
        "2. Using an ANN on MNIST\n",
        "  * Understand the dataset, and explore the limitations of this architecture compared to CNNs for processing image data.\n",
        "\n",
        "### **Part Two - Theory**\n",
        "3. Understanding CNNs\n",
        "  * Image Filters & Kernels\n",
        "  * Convolutional Layers\n",
        "  * Pooling Layers\n",
        "\n",
        "### **Part Three - Practical**\n",
        "4. MNIST dataset with CNN\n",
        "5. Color Images CIFAR-10 with CNN\n",
        "6. Working with images files (jpg, png .etc.)\n",
        "7. CNNs with Fashion MNIST dataset\n"
      ],
      "metadata": {
        "id": "ZLsmxENCpLMv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "-------"
      ],
      "metadata": {
        "id": "uvP-FqP1sBF9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Artificial Neural Network with MNIST Dataset**\n",
        "\n",
        "## **Steps for ANN:**\n",
        "1. Flatten 2D matrix into a 1D 784 input tensor\n",
        "  * Some of the 2D data is lost such that relationships between neighbouring pixels does not transfer to the network. More will be explored on what makes CNN better for this later.\n",
        "\n",
        "2. Feed the 784 inputs as neurons\n",
        "3. Process the data through the hidden layers with embeddings and activation functions (softmax)\n",
        "4. Output 10 neurons with probabilities of belonging to a class within the ranges 0-9"
      ],
      "metadata": {
        "id": "8EWt6j2-sQ12"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **1. Exploring The Data**"
      ],
      "metadata": {
        "id": "mnNxxeTQ0mgL"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YCPltOEnh8k9"
      },
      "outputs": [],
      "source": [
        "transform = transforms.ToTensor()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# training data\n",
        "try:\n",
        "  train_data = datasets.MNIST(root='/content',train=True,download=True,transform=transform) # for running in colab\n",
        "except Exception as e:\n",
        "  print(f\"Error downloading MNIST dataset to /content: {e}\")\n",
        "  print('Attempting to save to desktop instead...')\n",
        "\n",
        "  # get path to user desktop\n",
        "  desktop_path = str(Path.home() / \"Desktop\")\n",
        "\n",
        "  # save the dataset to the desktop\n",
        "  train_data = datasets.MNIST(root=desktop_path, train=True, download=True, transform=transform)\n",
        "  print(f\"MNIST dataset saved to: {desktop_path}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lPA5ZJLK6iIR",
        "outputId": "dc8887c7-0cd6-4578-bbd3-cc48ecb296e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 9.91M/9.91M [00:01<00:00, 6.07MB/s]\n",
            "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 28.9k/28.9k [00:00<00:00, 160kB/s]\n",
            "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1.65M/1.65M [00:01<00:00, 1.51MB/s]\n",
            "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4.54k/4.54k [00:00<00:00, 5.09MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# confirm train data info\n",
        "train_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EDJpTyzF9VLg",
        "outputId": "52a87d3a-de3f-4741-d077-78fb8a55eb25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Dataset MNIST\n",
              "    Number of datapoints: 60000\n",
              "    Root location: /content\n",
              "    Split: Train\n",
              "    StandardTransform\n",
              "Transform: ToTensor()"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# test data\n",
        "try:\n",
        "  test_data = datasets.MNIST(root='/content',train=False,download=True,transform=transform) # for running in colab\n",
        "except Exception as e:\n",
        "  print(f\"Error downloading MNIST dataset to /content: {e}\")\n",
        "  print('Attempting to save to desktop instead...')\n",
        "\n",
        "  # get path to user desktop\n",
        "  desktop_path = str(Path.home() / \"Desktop\")\n",
        "\n",
        "  # save the dataset to the desktop\n",
        "  test_data = datasets.MNIST(root=desktop_path, train=False, download=True, transform=transform)\n",
        "  print(f\"MNIST dataset saved to: {desktop_path}\")"
      ],
      "metadata": {
        "id": "gp0dl2fc8wvP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# confirm test data info\n",
        "test_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JFAzVKKi9Opf",
        "outputId": "3708dbe2-b2e3-4007-f81c-d7e01ba73ff3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Dataset MNIST\n",
              "    Number of datapoints: 10000\n",
              "    Root location: /content\n",
              "    Split: Test\n",
              "    StandardTransform\n",
              "Transform: ToTensor()"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **How the data is organised**\n",
        "* The data is organised as `x[0]` = 28x28 image, with `x[1]` as the label. This represented as a 2-item tuple.\n",
        "  * In this case, the label is ***5***."
      ],
      "metadata": {
        "id": "9lc7tCls-Fi8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# data as tuple pair\n",
        "print('Data Type:',type(train_data[0]))\n",
        "print('Data Length:',len(train_data[0]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C4Tn2Hda-i1B",
        "outputId": "0fbac4e4-4bcb-4870-d77f-eff02580d390"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data Type: <class 'tuple'>\n",
            "Data Length: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# the data is organised as i[0] = 28x28 image, with i[1] as the label\n",
        "image,label = train_data[0]\n",
        "image.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "2JTAMFli9XOI",
        "outputId": "e3b9100d-caab-47b0-c78c-8cab3826b693"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1, 28, 28])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "label"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2a-xoq0O_EqS",
        "outputId": "a64c286f-d412-45c3-b227-fe00945f0b91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_digit(image)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "4W5eLwPJ_KMf",
        "outputId": "892462c9-4582-40fb-8876-cc7fc72de241"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGFCAYAAAASI+9IAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAACMtJREFUeJzt3DloVlEexuGbGNegRjsVayGNC0oKwRW0UluxEK0iuDQGEVJYCtpp7MRKtBFT2CgKWoggKRQXMEVAxEKbkAhaKPJNM7zNDAz/O2PyTXye/uVcNOGX05yeTqfTaQCgaZre+f4AALqHKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQffP9AfCf/P79u7yZnZ39A1/yvzE2NtZq9+PHj/JmcnKyvLlx40Z5MzIyUt7cvXu3vGmaplm2bFl5c/HixfLm0qVL5c1C4KYAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEB7EW2A+ffpU3vz8+bO8efHiRXnz/Pnz8qZpmmZmZqa8uXfvXquzFpqNGzeWN2fPni1vxsfHy5uVK1eWN03TNJs3by5vdu/e3eqsv5GbAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAED0dDqdznx/BP/q1atXrXb79u0rb2ZnZ1udxdxatGhReXPr1q3ypr+/v7xpY/369a12a9asKW82bdrU6qy/kZsCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCAOGV1C41PT3dajc0NFTeTE1NtTproWnzb9fmxc6nT5+WN03TNEuWLClvvIBLlZsCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQPTN9wfw761du7bV7urVq+XNgwcPyputW7eWN+fOnStv2tqyZUt58+TJk/Kmv7+/vHn37l150zRNc+3atVY7qHBTACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAIieTqfTme+PYH59+/atvFm5cmV5Mzw8XN40TdPcvHmzvLl9+3Z5c+zYsfIGFho3BQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYDom+8PYP6tWrVqTs5ZvXr1nJzTNO0e0Tt69Gh509vr7yoWFj/RAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAERPp9PpzPdH8Hf4/v17q92hQ4fKm2fPnpU3Dx8+LG8OHDhQ3kA3c1MAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACA/i0fWmpqbKm23btpU3AwMD5c3evXvLm+3bt5c3TdM0p0+fLm96enpancXfy00BgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIDyIx4I0Pj5e3pw8ebK8+fbtW3nT1uXLl8ub48ePlzfr1q0rb1g43BQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAwoN48E9v374tb86fP1/ePHnypLxp69SpU+XN6OhoebNhw4byhu7kpgBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQHsSD/8LMzEx58+DBg1ZnnThxorxp8+u9f//+8ubx48flDd3JTQGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGA8Eoq/J9YunRpefPr16/yZvHixeXNo0ePyps9e/aUN/x5bgoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIA0TffHwDd4s2bN+XNvXv3ypuJiYnypmnaPW7XxuDgYHmza9euP/AlzAc3BQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYDwIB5db3Jysry5fv16eXP//v3y5suXL+XNXOrrq/+Kr1u3rrzp7fX35ULhfxKAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgPIhHK20egrtz506rs8bGxsqbjx8/tjqrm+3YsaO8GR0dLW8OHz5c3rBwuCkAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhAfxFpivX7+WN+/fvy9vzpw5U958+PChvOl2Q0ND5c2FCxdanXXkyJHyprfX333U+IkBIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAILySOgemp6fLm+Hh4VZnvX79uryZmppqdVY327lzZ3lz/vz58ubgwYPlzfLly8sbmCtuCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgDxVz+I9/Lly/LmypUr5c3ExER58/nz5/Km261YsaLV7ty5c+XN6OhoedPf31/ewELjpgBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQf/WDeOPj43OymUuDg4PlzaFDh8qbRYsWlTcjIyPlTdM0zcDAQKsdUOemAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABA9nU6nM98fAUB3cFMAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIP4BMdYEs23XkkoAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **2. Data Loading in Batches**\n",
        "* More on some data loading techniques below, posted on my [GitHub](https://github.com/aaronhowellai/machine-learning-projects/blob/main/machine%20learning%20concepts/efficient%20data%20loaders.png) page on \"/machine learning concepts\":\n",
        "\n",
        "![image description](https://raw.githubusercontent.com/aaronhowellai/machine-learning-projects/main/machine%20learning%20concepts/efficient%20data%20loaders.png)"
      ],
      "metadata": {
        "id": "6KT7AtIdB53N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# set seed for repeatability\n",
        "torch.manual_seed(101)\n",
        "\n",
        "# out of the 60,000 images, 100 are fed at a time into the ANN\n",
        "train_loader = DataLoader(train_data,batch_size=100, shuffle=True) # dataset is shuffled per epoch\n",
        "test_loader = DataLoader(test_data,batch_size=500, shuffle=False)"
      ],
      "metadata": {
        "id": "9-Hoaa1H_mId"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(train_loader)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "axDkCaXGGX2D",
        "outputId": "30b5c07a-799d-4633-bc8d-57f40a706410"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "600"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# first batch of images\n",
        "for images,labels in train_loader:\n",
        "  break"
      ],
      "metadata": {
        "id": "iX_Yx4JaEfdR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 4D tensor\n",
        "images.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IldZWd3OGAlD",
        "outputId": "181f0b07-2756-4abc-a8ea-40173d4b9783"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([100, 1, 28, 28])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "labels.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yd02H71AGLMN",
        "outputId": "48c45911-dd3e-44d9-a083-46d2a9bb4569"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([100])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print the first 12 labels\n",
        "print('Labels: ', labels[:12].numpy())\n",
        "\n",
        "# plot the first 12 images\n",
        "im = make_grid(images[:12], nrow=12)\n",
        "plt.figure(figsize=(10,4))\n",
        "plt.axis('off')\n",
        "plt.imshow(np.transpose(im.numpy(), (1,2,0)));"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        },
        "id": "UURQamf9GhB2",
        "outputId": "72ea2960-486a-40a9-a9ef-9ef2ba81ec21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Labels:  [   7    2    3    5    8    5    3    6    9    9    1    3]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **3. Define Multi-layer Perceptron Model**"
      ],
      "metadata": {
        "id": "7743SbLJInoT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class MLP(nn.Module):\n",
        "\n",
        "  def __init__(self,in_sz=784,out_sz=10,layers=[120,84]):\n",
        "    super().__init__()\n",
        "    self.fc1 = nn.Linear(in_sz,layers[0])\n",
        "    self.fc2 = nn.Linear(layers[0],layers[1])\n",
        "    self.fc3 = nn.Linear(layers[1],out_sz)\n",
        "\n",
        "  def forward(self,X):\n",
        "    X = F.relu(self.fc1(X))\n",
        "    X = F.relu(self.fc2(X))\n",
        "    X = self.fc3(X)\n",
        "\n",
        "    return F.log_softmax(X,dim=1)"
      ],
      "metadata": {
        "id": "PKKZsRmKG_sU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "torch.manual_seed(101)\n",
        "model = MLP()\n",
        "model"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DgPCg0O_LwLC",
        "outputId": "0349a602-107d-4484-8341-f6b267c02e7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MLP(\n",
              "  (fc1): Linear(in_features=784, out_features=120, bias=True)\n",
              "  (fc2): Linear(in_features=120, out_features=84, bias=True)\n",
              "  (fc3): Linear(in_features=84, out_features=10, bias=True)\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# number of parameters\n",
        "def count_parameters(model):\n",
        "  params = [p.numel() for p in model.parameters() if p.requires_grad]\n",
        "  for item in params:\n",
        "    print(f'{item:>6}')\n",
        "  print(f'_______\\n{sum(params):>6}')\n",
        "\n",
        "count_parameters(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E0oIH1jM32nW",
        "outputId": "47db07be-6d98-4c75-c142-971fdee5e077"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " 94080\n",
            "   120\n",
            " 10080\n",
            "    84\n",
            "   840\n",
            "    10\n",
            "_______\n",
            "105214\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# loss function and optimizer\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.Adam(model.parameters(),lr=0.001)"
      ],
      "metadata": {
        "id": "3FoHiP1yONQC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Flatten Input Images in Batch**"
      ],
      "metadata": {
        "id": "O7QHfY7aPebT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "images.view(100,-1).shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JSgWJyvkOrou",
        "outputId": "d865ce4e-48f7-4d6b-9003-9ae609d3f1e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([100, 784])"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **4. Model Training**\n",
        "### Steps:\n",
        "1. Track the time of when training starts\n",
        "  * `start_time = time.time()`\n",
        "\n",
        "2. Set the training loop range\n",
        "  * 1 Epoch = 1 run through the training data\n",
        "  * `epochs = 10`\n",
        "\n",
        "3. Track Error and Performance statistics throughout the loop\n",
        "  * `train_losses = []`\n",
        "  * `test_losses = []`\n",
        "  * `train_correct = []`\n",
        "  * `test_correct = []`\n",
        "\n",
        "4. For the number of epochs set, track how many predictions are correct against both the test and training set.\n",
        "  * `trn_corr = 0`\n",
        "  * `tst_corr = 0`\n",
        "\n",
        "5. From the training loader, batches of the data are coming in from the training set and are numbered, which helps keep track of them.\n",
        "  * `X_train` = images\n",
        "  * `y_train` = label\n",
        "  * `for b, (X_train, y_train) in enumerate(train_loader):`\n",
        "  * `b+=1`\n",
        "\n",
        "6. Run a prediction based off of the image after the array is flattened and compare the prediction to the correct label on the training data using the criterion or loss function.\n",
        "  * `y_pred = model(X_train.view(100,-1))`\n",
        "  * `loss = criterion(y_pred,y_train)`\n",
        "\n",
        "7. Compute predicted value using some functions and sum the number of predicted values matched with the true label, then track how many were correct on the Epoch.\n",
        "  * `predicted = torch.max(y_pred.data,1)[1]`\n",
        "  * `batch_corr = (predicted == y_train).sum()`\n",
        "  * `trn_corr += batch_corr`\n",
        "\n",
        "8. Perform backpropagation to minimise the gradients and pass the optimal weights and biases back through the network.\n",
        "  * `optimizer.zero_grad()`\n",
        "  * `loss.backward()`\n",
        "  * `optimizer.step()`\n",
        "\n",
        "9. Print a results report for the batches.\n",
        "* `if b%200 == 0:`\n",
        "  * `acc = trn_corr.item()*100/(100*b)`\n",
        "  * `print(f'Epoch: {i:2}  Batch: {b:4}  Loss: {loss.item():10.8f}  Accuracy:  {acc:7.3f}%')`\n",
        "\n",
        "10. Append the total training loss as well as the number of correct predictions.\n",
        "  * `train_losses.append(loss)`\n",
        "  * `train_correct.append(trn_corr)`\n",
        "\n",
        "11. Replicate the total loss for the test set without the backpropagation step that updates the weights and biases.\n",
        "*  `with torch.no_grad():`\n",
        "\n",
        "  *  `for b, (X_test,y_test) in enumerate(test_loader):`\n",
        "\n",
        "    *  `# apply the model`\n",
        "    *  `y_val = model(X_test.view(500,-1)) # flatten X_test array`\n",
        "    *  `predicted = torch.max(y_val.data,1)[1]`\n",
        "    *  `tst_corr += (predicted == y_test).sum()`\n",
        "\n",
        "12. Track the correctness sum and error metrics for the test set also.\n",
        "  * `loss = criterion(y_val,y_test)`\n",
        "  * `test_losses.append(loss)`\n",
        "  * `test_correct.append(tst_corr)`\n",
        "\n",
        "13. Print the time elapsed for training.\n",
        "  * `total_time = time.time() - start_time`\n",
        "  * `print(f'\\nDuration: {total_time/60:.2f} Minutes')`"
      ],
      "metadata": {
        "id": "eYAedMr8PutG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# track the time of when training starts\n",
        "start_time = time.time()\n",
        "\n",
        "# training\n",
        "epochs = 10\n",
        "\n",
        "# trackers\n",
        "train_losses = []\n",
        "test_losses = []\n",
        "train_correct = []\n",
        "test_correct = []\n",
        "\n",
        "# outer loop for iterative predictions\n",
        "for i in range(epochs):\n",
        "  trn_corr = 0\n",
        "  tst_corr = 0\n",
        "\n",
        "  for b, (X_train, y_train) in enumerate(train_loader):\n",
        "\n",
        "    b+=1\n",
        "\n",
        "    # apply the model\n",
        "    # >> output probabilities for 10 classes -> [0.1, 0.01,..., 0.8] -> '9'\n",
        "    y_pred = model(X_train.view(100,-1))\n",
        "    loss = criterion(y_pred,y_train)\n",
        "\n",
        "    # tally the number of correct predictions\n",
        "    predicted = torch.max(y_pred.data,1)[1]\n",
        "    batch_corr = (predicted == y_train).sum()\n",
        "    trn_corr += batch_corr\n",
        "\n",
        "    optimizer.zero_grad()\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "    # print iterative results\n",
        "    if b%200 == 0:\n",
        "      acc = trn_corr.item()*100/(100*b)\n",
        "      print(f'Epoch: {i:2}  Batch: {b:4}  Loss: {loss.item():10.8f}  Accuracy:  {acc:7.3f}%')\n",
        "\n",
        "  # update train loss & accuracy for the epoch\n",
        "  train_losses.append(loss)\n",
        "  train_correct.append(trn_corr)\n",
        "\n",
        "  # run the testing batches\n",
        "  with torch.no_grad():\n",
        "\n",
        "    for b, (X_test,y_test) in enumerate(test_loader):\n",
        "\n",
        "      # apply the model\n",
        "      y_val = model(X_test.view(500,-1)) # flatten X_test array\n",
        "      predicted = torch.max(y_val.data,1)[1]\n",
        "      tst_corr += (predicted == y_test).sum()\n",
        "\n",
        "  # update test & loss accuracy for the epoch\n",
        "  loss = criterion(y_val,y_test)\n",
        "  test_losses.append(loss)\n",
        "  test_correct.append(tst_corr)\n",
        "\n",
        "# print the time elapsed\n",
        "total_time = time.time() - start_time\n",
        "print(f'\\nDuration: {total_time/60:.2f} Minutes')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5yo6aNbvPV08",
        "outputId": "2af74e24-7848-4dee-b6ce-d1ccd62fb7fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  0  Batch:  200  Loss: 0.23541300  Accuracy:   83.250%\n",
            "Epoch:  0  Batch:  400  Loss: 0.35372806  Accuracy:   87.528%\n",
            "Epoch:  0  Batch:  600  Loss: 0.13651520  Accuracy:   89.573%\n",
            "Epoch:  1  Batch:  200  Loss: 0.24385470  Accuracy:   94.825%\n",
            "Epoch:  1  Batch:  400  Loss: 0.14487527  Accuracy:   95.060%\n",
            "Epoch:  1  Batch:  600  Loss: 0.07246917  Accuracy:   95.360%\n",
            "Epoch:  2  Batch:  200  Loss: 0.08382391  Accuracy:   96.520%\n",
            "Epoch:  2  Batch:  400  Loss: 0.06502087  Accuracy:   96.625%\n",
            "Epoch:  2  Batch:  600  Loss: 0.06827977  Accuracy:   96.717%\n",
            "Epoch:  3  Batch:  200  Loss: 0.12022455  Accuracy:   97.635%\n",
            "Epoch:  3  Batch:  400  Loss: 0.05816376  Accuracy:   97.500%\n",
            "Epoch:  3  Batch:  600  Loss: 0.03137050  Accuracy:   97.500%\n",
            "Epoch:  4  Batch:  200  Loss: 0.11588416  Accuracy:   98.155%\n",
            "Epoch:  4  Batch:  400  Loss: 0.04154605  Accuracy:   98.005%\n",
            "Epoch:  4  Batch:  600  Loss: 0.04871312  Accuracy:   98.022%\n",
            "Epoch:  5  Batch:  200  Loss: 0.00923768  Accuracy:   98.350%\n",
            "Epoch:  5  Batch:  400  Loss: 0.03706295  Accuracy:   98.483%\n",
            "Epoch:  5  Batch:  600  Loss: 0.05839961  Accuracy:   98.392%\n",
            "Epoch:  6  Batch:  200  Loss: 0.03517031  Accuracy:   98.825%\n",
            "Epoch:  6  Batch:  400  Loss: 0.06132410  Accuracy:   98.713%\n",
            "Epoch:  6  Batch:  600  Loss: 0.09007818  Accuracy:   98.688%\n",
            "Epoch:  7  Batch:  200  Loss: 0.08053235  Accuracy:   99.150%\n",
            "Epoch:  7  Batch:  400  Loss: 0.07314455  Accuracy:   98.980%\n",
            "Epoch:  7  Batch:  600  Loss: 0.04573785  Accuracy:   98.918%\n",
            "Epoch:  8  Batch:  200  Loss: 0.00461611  Accuracy:   99.265%\n",
            "Epoch:  8  Batch:  400  Loss: 0.00482632  Accuracy:   99.175%\n",
            "Epoch:  8  Batch:  600  Loss: 0.09180396  Accuracy:   99.135%\n",
            "Epoch:  9  Batch:  200  Loss: 0.00436920  Accuracy:   99.440%\n",
            "Epoch:  9  Batch:  400  Loss: 0.01520496  Accuracy:   99.305%\n",
            "Epoch:  9  Batch:  600  Loss: 0.02524535  Accuracy:   99.277%\n",
            "\n",
            "Duration: 1.84 Minutes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **5. Model Evaluation**"
      ],
      "metadata": {
        "id": "A9Q8gRXFTDF3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Plot Loss and Accuracy Comparisons**"
      ],
      "metadata": {
        "id": "LBmqMzK5VFkp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.style.use('dark_background')\n",
        "\n",
        "plt.figure(figsize=(8,4))\n",
        "np_train_losses = [loss.detach().cpu().numpy() for loss in train_losses]\n",
        "plt.plot(np_train_losses,\n",
        "         marker='o',\n",
        "         color='purple',\n",
        "         linestyle='--',\n",
        "         label='Training Loss')\n",
        "\n",
        "np_test_losses = [loss.detach().cpu().numpy() for loss in test_losses]\n",
        "plt.plot(np_test_losses,\n",
        "         marker='o',\n",
        "         color='green',\n",
        "         linestyle=('-'),\n",
        "         label='Test/Validation Loss')\n",
        "\n",
        "plt.grid(alpha=.25)\n",
        "plt.legend()\n",
        "plt.title('Loss at the end of each Epoch')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss (Cross Entropy)')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "3yS3-ULSTUmc",
        "outputId": "32dd1ae5-3dab-4511-e9db-ddcbae8035c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,4))\n",
        "\n",
        "plt.plot(\n",
        "    [t/600 for t in train_correct],\n",
        "    marker='o',\n",
        "    color='purple',\n",
        "    linestyle=('--'),\n",
        "    label='Training Accuracy'\n",
        "    )\n",
        "plt.plot(\n",
        "    [t/100 for t in test_correct],\n",
        "    marker='o',\n",
        "    color='green',\n",
        "    linestyle=('-'),\n",
        "    label='Test/Validation Accuracy'\n",
        "    )\n",
        "\n",
        "plt.grid(alpha=.25)\n",
        "plt.legend(loc='lower right')\n",
        "plt.title('Accuracy % at the end of each Epoch')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('% Accuracy')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "7cAQCzhfV6S5",
        "outputId": "e2aa574a-613b-432a-b46d-c869918f5254"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Evaluate Model on Unseen Data**"
      ],
      "metadata": {
        "id": "ZCrFJUhNZiBU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_load_all = DataLoader(test_data,batch_size=10000,shuffle=False)"
      ],
      "metadata": {
        "id": "JycncegpKoel"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with torch.no_grad():\n",
        "  correct = 0\n",
        "\n",
        "  for X_test,y_test in test_load_all:\n",
        "    y_val = model(X_test.view(len(X_test),-1))\n",
        "    predicted = torch.max(y_val,1)[1]\n",
        "    correct+= (predicted==y_test).sum()"
      ],
      "metadata": {
        "id": "TkA_dQLraNQc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pcnt = correct.item()/len(test_data)*100\n",
        "print(f'Model Accuracy: {pcnt}%')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D3axE51Ia9Kp",
        "outputId": "5ea58f1c-adde-4331-dc78-6de19c6bc620"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Accuracy: 97.75%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Note:**\n",
        "* Values on the diagonal is how many predictions are correct per class"
      ],
      "metadata": {
        "id": "R99HFBVubr80"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "confusion_matrix(predicted.view(-1),y_test.view(-1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QZqux_AFbStz",
        "outputId": "d009e538-2c8e-4b59-e025-e2fb63c637f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 972,    0,    4,    0,    1,    2,    5,    2,    3,    2],\n",
              "       [   0, 1124,    3,    0,    0,    0,    3,    8,    0,    2],\n",
              "       [   1,    3, 1002,    2,    1,    0,    2,   11,    4,    0],\n",
              "       [   2,    2,    7,  990,    0,    8,    1,    4,    2,    2],\n",
              "       [   1,    0,    2,    0,  962,    3,    1,    2,    3,   11],\n",
              "       [   0,    0,    0,    7,    0,  866,    3,    0,    2,    3],\n",
              "       [   1,    1,    1,    0,    6,    2,  941,    0,    1,    0],\n",
              "       [   0,    0,    2,    3,    1,    1,    0,  981,    2,    0],\n",
              "       [   3,    5,   11,    4,    1,    9,    2,    3,  952,    4],\n",
              "       [   0,    0,    0,    4,   10,    1,    0,   17,    5,  985]])"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "E4pVd89ObqwR"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}